create database Brazil_Ecommerce;
use Brazil_Ecommerce;

-- Queries

-- Basic

-- 1. Count the total number of orders from orders table.
select count(order_id) as total_number_of_orders from orders; 

-- 2. List all unique order statuses available.
select distinct(order_status) as unique_order_status from orders;

-- 3. Show the top 5 customer states by total number of customers.
select customer_state, count(*) as total_customers from customers
group by customer_state
order by total_customers Desc
limit 5; 

-- 4. Find the average product price from the order_items table.
select avg(price) as Average_price from order_items;

-- 5. Count the number of reviews for each review score.
select count(review_score) as number_of_reviews from order_reviews;
-- Intermediate

-- 6. Calculate total revenue generated by each payment type.
select payment_type, sum(payment_value) as Total_revenue from order_payments
group by payment_type order by Total_revenue Desc;

-- 7. Display  the number  of orders per month.
select date_format(order_purchase_timestamp, '%Y-%m') as order_month, 
count(*) as total_orders from orders group by order_month
order by total_orders ;

-- 8. Find the average delivery time (in days) for all delivered orders.
select round(avg(DateDiff(order_delivered_customer_date, order_purchase_timestamp)),2) as avg_delivery_time 
from orders 
where order_status = 'delivered';

-- 9. List the top 10 most sold product based of on quantiy.
select product_id, Count(*) as items_sold
from order_items
group by  product_id
order by items_sold desc
limit 10;

-- 10. Count how many seller are available in each state.
select seller_state, count(distinct seller_id) as total_sellers
from sellers
group by seller_state
order by total_sellers desc ;

-- 11. compute the average freight cost for each seller state.
select s.seller_state, avg(o.freight_value) as avg_freight_cost
from order_items o 
join sellers s  on o.seller_id = s.seller_id
group by s.seller_state
order by avg_freight_cost
desc;

-- 12. Show the total sales value of each product category.
select p.product_category_name, sum(o.price) as total_sales
from order_items o 
join products p on o.product_id = p.product_id 
group by p.product_category_name
order by total_sales
desc;


-- Advanced

-- 13. Calculate how many days early or late each order was delivered compared to the estimated delivery date.
select order_id,
order_estimated_delivery_date,
order_delivered_customer_date,
datediff(order_estimated_delivery_date, order_delivered_customer_date)as delivery_diff_days
from orders
where order_delivered_customer_date is not null;

-- 14. Identify order that are likely refunds based on low review scores.
select o.order_id,
r.review_score,
o.customer_id
from order_reviews r
join orders o on o.order_id = r.order_id
where r.review_score <=2;

-- 15. calculate total revenue generated by each customer ( customer lifetime value).
select
o.customer_id,
round(sum(p.payment_value),2) as total_amount
from orders o
join order_payments p on o.order_id = p.order_id
group by o.customer_id order by total_amount desc;

-- 16. list of customer who made more that 3 orders and spent more than 500 in total.
select
o.customer_id,
count(distinct o.order_id) as total_orders,
round(sum(p.payment_value),2) as total_spent
from orders o
join order_payments p on o.order_id = p.order_id
group by o.customer_id
having count(distinct o.order_id) >=1 and  total_spent > 500;

-- 17. Find average review score per product category.
select p.product_category_name,
avg(r.review_score) as avg_reviews
from products p
join order_items oi 
on oi.product_id = p.product_id
join order_reviews r on oi.order_id = r.order_id
group by  p.product_category_name;

-- 18. Rank cities by average delivery time.
SELECT 
    c.customer_city,
    ROUND(AVG(DATEDIFF(o.order_delivered_customer_date, o.order_purchase_timestamp)), 2) AS avg_delivery_days
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
WHERE o.order_delivered_customer_date IS NOT NULL
GROUP BY c.customer_city
ORDER BY avg_delivery_days DESC;


-- 19. Identify the top 5 product categories contributing most to overall revenue.
SELECT 
    pr.product_category_name,
    ROUND(SUM(oi.price + oi.freight_value), 2) AS total_revenue
FROM order_items oi
JOIN products pr ON oi.product_id = pr.product_id
GROUP BY pr.product_category_name
ORDER BY total_revenue DESC
LIMIT 5;


-- 20. Create a view that shows order details joined with customer, seller, and payment information.
SELECT 
    o.order_id,
    o.customer_id,
    c.customer_city,
    o.order_purchase_timestamp,
    
    oi.product_id,
    oi.seller_id,
    s.seller_city,
    oi.price,
    oi.freight_value,
    
    p.payment_type,
    p.payment_value
FROM orders o
LEFT JOIN customers c ON o.customer_id = c.customer_id
LEFT JOIN order_items oi ON o.order_id = oi.order_id
LEFT JOIN sellers s ON oi.seller_id = s.seller_id
LEFT JOIN order_payments p ON o.order_id = p.order_id
LIMIT 100;

CREATE OR REPLACE VIEW order_full_details AS
SELECT 
    o.order_id,
    o.customer_id,
    c.customer_city,
    o.order_purchase_timestamp,
    
    oi.product_id,
    oi.seller_id,
    s.seller_city,
    oi.price,
    oi.freight_value,
    
    p.payment_type,
    p.payment_value
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
JOIN order_items oi ON o.order_id = oi.order_id
JOIN sellers s ON oi.seller_id = s.seller_id
JOIN order_payments p ON o.order_id = p.order_id;


